{"ast":null,"code":"import { Result, ethers } from 'ethers';\nimport ABI from '../contracts/Branding.json';\nimport axios from 'axios';\nlet provider = new ethers.BrowserProvider(window.ethereum);\n//这里改一下，再把json换了\nconst contractAddress = \"0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9\";\nconst contract = new ethers.Contract(contractAddress, ABI, await provider.getSigner());\nexport async function balanceOf(address) {\n  const result = await contract.dinosaurs.length;\n  return Number(result);\n}\nexport async function tokenOfOwnerByIndex(owner, index) {\n  const struct = await contract.dinosaurs[index];\n  const result = struct.owner;\n  return Number(result);\n}\nexport async function tokenURI(tokenId) {\n  const result = await contract.dinosaurs[tokenId];\n  const uri = result.pictrueUri;\n  console.log(uri);\n}\nexport async function getMetadata(tokenId) {\n  const result = await contract.dinosaurs[tokenId];\n  return {\n    isMale: result.isMale,\n    species: result.species,\n    imageURL: result.color,\n    rarity: result.rarity,\n    owner: result.owner\n  };\n}\nexport async function buy(isDin, tokenId) {\n  const result = await contract.buy(isDin, tokenId);\n  console.log('buy', result.hash);\n}\nexport async function upload(isDin, tokenId, price) {\n  const result = await contract.upload(isDin, tokenId, price);\n  return Boolean(result);\n}\nexport async function changePrice(isDin, tokenId, price) {\n  await buy(isDin, tokenId);\n  const result = await upload(isDin, tokenId, price);\n  return Boolean(result);\n}\nexport async function cancelOrder(isDin, tokenId) {\n  const result = await buy(isDin, tokenId);\n  return Boolean(result);\n}\nexport async function getAllNFTs(isDin) {\n  if (isDin == true) {\n    const result = await contract.getMarketDinosaur();\n    return Array(result);\n  } else {\n    const result = await contract.getMarketEgg();\n    return Array(result);\n  }\n}\nexport async function getMyNFTs(isDin, userAddress) {\n  let result;\n  if (isDin == true) {\n    result = await contract.getWhoseDinosaur(userAddress);\n  } else {\n    result = await contract.getWhoseEgg(userAddress);\n  }\n  return result;\n}\nexport async function getOrder(tokenId) {\n  const result = await contract.orderOfId(tokenId);\n  return {\n    seller: result[0],\n    tokenId: Number(result[1]),\n    price: Number(result[2]) / 1e18\n  };\n}","map":{"version":3,"names":["Result","ethers","ABI","axios","provider","BrowserProvider","window","ethereum","contractAddress","contract","Contract","getSigner","balanceOf","address","result","dinosaurs","length","Number","tokenOfOwnerByIndex","owner","index","struct","tokenURI","tokenId","uri","pictrueUri","console","log","getMetadata","isMale","species","imageURL","color","rarity","buy","isDin","hash","upload","price","Boolean","changePrice","cancelOrder","getAllNFTs","getMarketDinosaur","Array","getMarketEgg","getMyNFTs","userAddress","getWhoseDinosaur","getWhoseEgg","getOrder","orderOfId","seller"],"sources":["D:/software/compile Practice/code/codeHomework/sunYinpin/src/utils/branding.js"],"sourcesContent":["import { Result, ethers } from 'ethers';\r\nimport ABI from '../contracts/Branding.json';\r\nimport axios from 'axios';\r\n\r\nlet provider = new ethers.BrowserProvider(window.ethereum)\r\n//这里改一下，再把json换了\r\nconst contractAddress = \"0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9\";\r\nconst contract = new ethers.Contract(contractAddress, ABI, await provider.getSigner());\r\n\r\nexport async function balanceOf(address) {\r\n  const result = await contract.dinosaurs.length;\r\n  return Number(result);\r\n}\r\n\r\nexport async function tokenOfOwnerByIndex(owner, index) {\r\n  const struct = await contract.dinosaurs[index];\r\n  const result = struct.owner;\r\n  return Number(result);\r\n}\r\n\r\nexport async function tokenURI(tokenId) {\r\n  const result = await contract.dinosaurs[tokenId];\r\n  const uri = result.pictrueUri;\r\n  console.log(uri);\r\n}\r\n\r\nexport async function getMetadata(tokenId) {\r\n  const result = await contract.dinosaurs[tokenId];\r\n  return {\r\n    isMale: result.isMale,\r\n    species: result.species,\r\n    imageURL: result.color,\r\n    rarity: result.rarity,\r\n    owner: result.owner,\r\n\r\n  }\r\n}\r\n\r\nexport async function buy(isDin, tokenId) {\r\n  const result = await contract.buy(isDin, tokenId);\r\n  console.log('buy', result.hash);\r\n}\r\n\r\nexport async function upload(isDin, tokenId, price) {\r\n  const result = await contract.upload(isDin, tokenId, price);\r\n  return Boolean(result);\r\n}\r\n\r\nexport async function changePrice(isDin, tokenId, price) {\r\n\r\n  await buy(isDin, tokenId);\r\n  const result = await upload(isDin, tokenId, price);\r\n  return Boolean(result)\r\n}\r\n\r\nexport async function cancelOrder(isDin, tokenId) {\r\n  const result = await buy(isDin, tokenId);\r\n  return Boolean(result)\r\n}\r\n\r\nexport async function getAllNFTs(isDin) {\r\n  if (isDin == true) {\r\n    const result = await contract.getMarketDinosaur();\r\n    return Array(result);\r\n  } else {\r\n    const result = await contract.getMarketEgg();\r\n    return Array(result);\r\n  }\r\n\r\n}\r\n\r\nexport async function getMyNFTs(isDin, userAddress) {\r\n  let result\r\n  if (isDin == true) {\r\n    result = await contract.getWhoseDinosaur(userAddress);\r\n  } else {\r\n    result = await contract.getWhoseEgg(userAddress);\r\n  }\r\n  return result;\r\n}\r\n\r\nexport async function getOrder(tokenId) {\r\n  const result = await contract.orderOfId(tokenId);\r\n  return {\r\n    seller: result[0],\r\n    tokenId: Number(result[1]),\r\n    price: Number(result[2]) / 1e18,\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}