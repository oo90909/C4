{"ast":null,"code":"import { Result, ethers } from 'ethers';\nimport ABI from '../contracts/Branding.json';\nimport axios from 'axios';\nlet provider = new ethers.BrowserProvider(window.ethereum);\n\n//这里改一下，再把json换了\nconst userAddress = \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\";\nconst contractAddress = \"0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9\";\nconst marketAddress = \"0xD631348E8915dbBc1F1D18FE6DCBFD6cd8514e6c\";\nconst contract = new ethers.Contract(contractAddress, ABI, await provider.getSigner());\nexport async function balanceOf() {\n  const result = await contract.dinLength();\n  return Number(result);\n}\n\n//返回owner\nexport async function tokenOfOwnerByIndex(isDin, index) {\n  const result = await contract.getOwner(isDin, index);\n  return result;\n}\nexport async function tokenURI(isDin, tokenId) {\n  const result = await getMetadata(isDin, tokenId, 7);\n  return result;\n}\n\n//第三个参数是几，就拿到这个结构体里面的第几个属性\nexport async function getMetadata(isDin, tokenId, choose) {\n  if (isDin == true) {\n    const result = await contract.getDinosaurValue(tokenId, choose);\n    return result;\n  } else {\n    const result = await contract.getEggValue(tokenId, choose);\n    return result;\n  }\n}\nexport async function buy(isDin, tokenId, value) {\n  console.log(\"value:\", value);\n  console.log(\"isDin:\", isDin);\n  console.log(\"isDin:\", tokenId);\n  const tx = await contract.buy(isDin, tokenId, {\n    value: value\n  });\n  const result = await tx.wait();\n  return tx.hash;\n}\nexport async function upload(isDin, tokenId, price) {\n  const tx = await contract.upload(isDin, tokenId, price);\n  const result = await tx.wait();\n  return result.hash;\n}\nexport async function cancelOrder(isDin, tokenId) {\n  const result = await buy(isDin, tokenId);\n}\n\n//获取的是id\nexport async function getAllNFTs(isDin) {\n  if (isDin == true) {\n    const result = await contract.getWhoseDinosaur(marketAddress);\n    const length = result.length;\n    let pop;\n    for (let i = 0; i < length; i++) {\n      pop.push(result[i]);\n    }\n    return pop;\n  } else {\n    const result = await contract.getWhoseEgg(marketAddress);\n    return Array(result);\n  }\n}\nexport async function getMyNFTs(isDin) {\n  const result = null;\n  if (isDin == true) {\n    result = await contract.getWhoseDinosaur(userAddress);\n  } else {\n    result = await contract.getWhoseEgg(userAddress);\n  }\n  return Array(result);\n}","map":{"version":3,"names":["Result","ethers","ABI","axios","provider","BrowserProvider","window","ethereum","userAddress","contractAddress","marketAddress","contract","Contract","getSigner","balanceOf","result","dinLength","Number","tokenOfOwnerByIndex","isDin","index","getOwner","tokenURI","tokenId","getMetadata","choose","getDinosaurValue","getEggValue","buy","value","console","log","tx","wait","hash","upload","price","cancelOrder","getAllNFTs","getWhoseDinosaur","length","pop","i","push","getWhoseEgg","Array","getMyNFTs"],"sources":["D:/software/compile Practice/code/codeHomework/sunYinpin/src/utils/branding.js"],"sourcesContent":["import { Result, ethers } from 'ethers';\r\nimport ABI from '../contracts/Branding.json';\r\nimport axios from 'axios';\r\n\r\nlet provider = new ethers.BrowserProvider(window.ethereum)\r\n\r\n//这里改一下，再把json换了\r\nconst userAddress=\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\";\r\nconst contractAddress = \"0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9\";\r\nconst marketAddress=\"0xD631348E8915dbBc1F1D18FE6DCBFD6cd8514e6c\";\r\n\r\nconst contract = new ethers.Contract(contractAddress, ABI, await provider.getSigner());\r\n\r\nexport async function balanceOf() {\r\n    const result = await contract.dinLength();\r\n    return Number(result);\r\n}\r\n\r\n//返回owner\r\nexport async function tokenOfOwnerByIndex(isDin,index) {\r\n    const result= await contract.getOwner(isDin,index);\r\n    return result;\r\n}\r\n\r\nexport async function tokenURI(isDin,tokenId) {\r\n    const result= await getMetadata(isDin,tokenId,7)\r\n    return result;\r\n}\r\n\r\n//第三个参数是几，就拿到这个结构体里面的第几个属性\r\nexport async function getMetadata(isDin,tokenId,choose) {\r\n   \r\nif(isDin==true){\r\n    const result = await contract.getDinosaurValue(tokenId,choose);\r\n    return result\r\n}else{\r\n    const result = await contract.getEggValue(tokenId,choose);\r\n    return result\r\n}\r\n}\r\n\r\nexport async function buy(isDin,tokenId,value) {\r\n    console.log(\"value:\",value)\r\n    console.log(\"isDin:\",isDin)\r\n    console.log(\"isDin:\",tokenId)\r\n    const tx = await contract.buy(isDin,tokenId,{value:value});\r\n    const result = await tx.wait();\r\n    return tx.hash\r\n}\r\n\r\nexport async function upload(isDin ,tokenId,price){\r\n    const tx = await contract.upload(isDin,tokenId,price);\r\n    const result = await tx.wait();\r\n   return result.hash;\r\n}\r\n\r\n\r\nexport async function cancelOrder(isDin,tokenId) {\r\n  const result =  await buy(isDin,tokenId);\r\n}\r\n\r\n//获取的是id\r\nexport async function getAllNFTs(isDin) {\r\n    if(isDin==true){\r\n        const result = await contract.getWhoseDinosaur(marketAddress);\r\n        const length=result.length;\r\n        let pop;\r\n        for(let i=0;i<length;i++){\r\n          pop.push(result[i]);\r\n        }\r\n        return pop;\r\n    }else{\r\n        const result = await contract.getWhoseEgg(marketAddress);                                      \r\n        return Array(result);\r\n    } \r\n   \r\n} \r\n \r\nexport async function getMyNFTs(isDin) { \r\n    const result=null;\r\n    if(isDin==true){ \r\n         result = await contract.getWhoseDinosaur(userAddress);\r\n    }else{ \r\n         result = await contract.getWhoseEgg(userAddress);\r\n    } \r\n return Array(result);\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}